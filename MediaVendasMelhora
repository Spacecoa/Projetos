//NEW IMPROVEMENT
//Data base SQL3
//Graphic interface



import tkinter as tk
from tkinter import ttk
import sqlite3

def create_database_and_table():
    # Create a connection to the database (or connect to an existing one)
    conn = sqlite3.connect("combustivel.db")

    # Create a cursor to interact with the database
    cursor = conn.cursor()

    # Create a table to store the employee and sales data
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS funcionarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            gasolina_comum REAL NOT NULL,
            gasolina_aditivada REAL NOT NULL,
            etanol_comum REAL NOT NULL,
            etanol_aditivado REAL NOT NULL
        )
    """)

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

def load_data_from_database():
    conn = sqlite3.connect("combustivel.db")
    cursor = conn.cursor()

    # Retrieve all data from the 'funcionarios' table
    cursor.execute("SELECT * FROM funcionarios")
    data = cursor.fetchall()

    # Display data in the Treeview
    for row in data:
        nome, gasolina_comum, gasolina_aditivada, etanol_comum, etanol_aditivado = row[1:]  # Ignore the 'id' column
        vendas_gasolina = {
            "Gasolina Comum": gasolina_comum,
            "Gasolina Aditivada": gasolina_aditivada,
        }
        vendas_etanol = {
            "Etanol Comum": etanol_comum,
            "Etanol Aditivado": etanol_aditivado,
        }
        media_gasolina, media_etanol = calcular_media_ponderada(vendas_gasolina, vendas_etanol)
        tree.insert("", "end", values=(nome, gasolina_comum, gasolina_aditivada, f"{media_gasolina:.2f} %", etanol_comum, etanol_aditivado, f"{media_etanol:.2f} %"))

    conn.close()

def calcular_media_ponderada(vendas_gasolina, vendas_etanol):
    try:
        soma_vendas_gasolina = vendas_gasolina["Gasolina Comum"] + vendas_gasolina["Gasolina Aditivada"]
        soma_vendas_etanol = vendas_etanol["Etanol Comum"] + vendas_etanol["Etanol Aditivado"]
        media_ponderada_gasolina = 100 * vendas_gasolina["Gasolina Aditivada"] / soma_vendas_gasolina
        media_ponderada_etanol = 100 * vendas_etanol["Etanol Aditivado"] / soma_vendas_etanol
        return media_ponderada_gasolina, media_ponderada_etanol
    except ZeroDivisionError:
        return 0, 0

def adicionar_funcionario():
    nome = entry_nome.get()
    gasolina_comum = float(entry_gasolina_comum.get())
    gasolina_aditivada = float(entry_gasolina_aditivada.get())
    etanol_comum = float(entry_etanol_comum.get())
    etanol_aditivado = float(entry_etanol_aditivado.get())

    vendas_gasolina = {
        "Gasolina Comum": gasolina_comum,
        "Gasolina Aditivada": gasolina_aditivada,
    }
    vendas_etanol = {
        "Etanol Comum": etanol_comum,
        "Etanol Aditivado": etanol_aditivado,
    }

    # Insert the data into the database
    conn = sqlite3.connect("combustivel.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO funcionarios (nome, gasolina_comum, gasolina_aditivada, etanol_comum, etanol_aditivado)
        VALUES (?, ?, ?, ?, ?)
    """, (nome, gasolina_comum, gasolina_aditivada, etanol_comum, etanol_aditivado))
    conn.commit()
    conn.close()

    media_gasolina, media_etanol = calcular_media_ponderada(vendas_gasolina, vendas_etanol)

    tree.insert("", "end", values=(nome, gasolina_comum, gasolina_aditivada, f"{media_gasolina:.2f} %", etanol_comum, etanol_aditivado, f"{media_etanol:.2f} %"))

    entry_nome.delete(0, tk.END)
    entry_gasolina_comum.delete(0, tk.END)
    entry_gasolina_aditivada.delete(0, tk.END)
    entry_etanol_comum.delete(0, tk.END)
    entry_etanol_aditivado.delete(0, tk.END)

app = tk.Tk()
app.title("Registro de Vendas de Combustível")

# Configuração do tamanho da janela
largura = app.winfo_screenwidth() // 2
altura = app.winfo_screenheight() // 2
app.geometry(f"{1070}x{250}")

# Create the database and table
create_database_and_table()

matrizGasolina = []

frame_inputs = tk.Frame(app)
frame_inputs.grid(row=0, column=0, padx=10, pady=10)

label_nome = tk.Label(frame_inputs, text="Nome do Funcionário:")
label_nome.grid(row=0, column=0, padx=10, pady=10)
entry_nome = tk.Entry(frame_inputs)
entry_nome.grid(row=0, column=1, padx=5, pady=5)

label_gasolina_comum = tk.Label(frame_inputs, text="Gasolina Comum:")
label_gasolina_comum.grid(row=1, column=0, padx=5, pady=5)
entry_gasolina_comum = tk.Entry(frame_inputs)
entry_gasolina_comum.grid(row=1, column=1, padx=5, pady=5)

label_gasolina_aditivada = tk.Label(frame_inputs, text="Gasolina Aditivada:")
label_gasolina_aditivada.grid(row=2, column=0, padx=5, pady=5)
entry_gasolina_aditivada = tk.Entry(frame_inputs)
entry_gasolina_aditivada.grid(row=2, column=1, padx=5, pady=5)

label_etanol_comum = tk.Label(frame_inputs, text="Etanol Comum:")
label_etanol_comum.grid(row=3, column=0, padx=5, pady=5)
entry_etanol_comum = tk.Entry(frame_inputs)
entry_etanol_comum.grid(row=3, column=1, padx=5, pady=5)

label_etanol_aditivado = tk.Label(frame_inputs, text="Etanol Aditivado:")
label_etanol_aditivado.grid(row=4, column=0, padx=5, pady=5)
entry_etanol_aditivado = tk.Entry(frame_inputs)
entry_etanol_aditivado.grid(row=4, column=1, padx=5, pady=5)

button_adicionar = tk.Button(frame_inputs, text="Adicionar Funcionário", command=adicionar_funcionario)
button_adicionar.grid(row=5, column=0, columnspan=2, padx=5, pady=10)

frame_table = tk.Frame(app)
frame_table.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

columns = ("Nome", "Gasolina Comum", "Gasolina Aditivada", "MIX GASOLINA", "Etanol Comum", "Etanol Aditivado", "MIX ETANOL")
tree = ttk.Treeview(frame_table, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=largura // len(columns))  # Divide a largura igualmente entre as colunas
tree.pack(fill="both", expand=True)

# Load data from the database and display in the Treeview
load_data_from_database()

app.mainloop()

