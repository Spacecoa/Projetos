#Tela de login com banco de dados integrado e criptografia para assegurar a segurança dos dados

import tkinter as tk
from tkinter import messagebox
import sqlite3
import hashlib

def criar_banco_dados():
    conexao = sqlite3.connect("usuarios.db")
    cursor = conexao.cursor()

    # Cria a tabela de usuários se ela não existir
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            login TEXT,
            senha TEXT
        )
    """)

    conexao.commit()
    conexao.close()

def inserir_usuario():
    login = entry_usuario.get()
    senha = entry_senha.get()

    # Criptografa a senha usando o algoritmo SHA256
    senha_criptografada = hashlib.sha256(senha.encode()).hexdigest()

    conexao = sqlite3.connect("usuarios.db")
    cursor = conexao.cursor()

    # Insere um novo usuário na tabela
    cursor.execute("INSERT INTO usuarios (login, senha) VALUES (?, ?)", (login, senha_criptografada))

    conexao.commit()
    conexao.close()

    messagebox.showinfo("Cadastro", "Usuário cadastrado com sucesso!")

def validar():
    login = entry_usuario.get()
    senha = entry_senha.get()

    # Criptografa a senha digitada para comparar com a senha armazenada no banco
    senha_criptografada = hashlib.sha256(senha.encode()).hexdigest()

    conexao = sqlite3.connect("usuarios.db")
    cursor = conexao.cursor()

    # Realiza uma consulta para verificar se o usuário e senha estão corretos
    cursor.execute("SELECT * FROM usuarios WHERE login = ? AND senha = ?", (login, senha_criptografada))

    resultado = cursor.fetchone()

    conexao.close()

    if resultado is not None:
        messagebox.showinfo("Login", "Login bem-sucedido!")
    else:
        messagebox.showerror("Login", "Usuário ou senha inválidos!")

def mostrar_usuarios():
    conexao = sqlite3.connect("usuarios.db")
    cursor = conexao.cursor()

    # Realiza uma consulta para obter todos os usuários cadastrados
    cursor.execute("SELECT login FROM usuarios")

    usuarios = cursor.fetchall()

    conexao.close()

    # Cria uma nova janela para exibir os usuários
    janela_usuarios = tk.Toplevel()
    janela_usuarios.title("Usuários Cadastrados")

    lista_usuarios = tk.Listbox(janela_usuarios)

    for usuario in usuarios:
        lista_usuarios.insert(tk.END, usuario[0])

    lista_usuarios.pack(padx=10, pady=10)

# Cria o banco de dados (chamado apenas uma vez para criar o banco)
criar_banco_dados()

# Interface gráfica
janela = tk.Tk()
janela.title("Aplicativo de Login")

label_usuario = tk.Label(janela, text="Usuário:")
label_usuario.grid(row=0, column=0, padx=10, pady=10)

entry_usuario = tk.Entry(janela)
entry_usuario.grid(row=0, column=1, padx=10, pady=10)

label_senha = tk.Label(janela, text="Senha:")
label_senha.grid(row=1, column=0, padx=10, pady=10)

entry_senha = tk.Entry(janela, show="*")
entry_senha.grid(row=1, column=1, padx=10, pady=10)

botao_cadastrar = tk.Button(janela, text="Cadastrar", command=inserir_usuario)
botao_cadastrar.grid(row=2, column=0, padx=10, pady=10)

botao_login = tk.Button(janela, text="Login", command=validar)
botao_login.grid(row=2, column=1, padx=10, pady=10)

botao_mostrar_usuarios = tk.Button(janela, text="Mostrar Usuários", command=mostrar_usuarios)
botao_mostrar_usuarios.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

janela.mainloop()
