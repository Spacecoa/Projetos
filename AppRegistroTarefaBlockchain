import sys
import time
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QWidget, QVBoxLayout, QHBoxLayout, \
    QLineEdit, QPushButton, QListWidget, QMessageBox, QCheckBox, QTextEdit
from PyQt5.QtCore import QTimer, QRect, Qt, QPropertyAnimation, pyqtProperty, pyqtSignal
from PyQt5.QtWidgets import QListWidgetItem

from hashlib import sha256


class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        data = f"{self.index}{self.timestamp}{self.data}{self.previous_hash}".encode()
        return sha256(data).hexdigest()


class Blockchain:
    def __init__(self):
        self.chain = []
        self.completed_blocks = []

    def add_block(self, block):
        self.chain.append(block)

    def add_completed_block(self, block):
        self.completed_blocks.append(block)

    def get_latest_block(self):
        return self.chain[-1] if self.chain else None


class ConfirmationBox(QLabel):
    animationFinished = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setGeometry(0, 0, 0, 0)
        self.setAlignment(Qt.AlignCenter)
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setStartValue(QRect(0, 0, 0, 0))
        self.animation.setEndValue(QRect(100, 100, 200, 100))
        self.animation.finished.connect(self.animationFinished.emit)

    def startAnimation(self):
        self.animation.start()

    def resetAnimation(self):
        self.setGeometry(0, 0, 0, 0)


class BlockchainWidget(QWidget):
    def __init__(self, blockchain):
        super().__init__()
        self.blockchain = blockchain
        self.layout = QVBoxLayout(self)
        self.label_title = QLabel("Blockchain")
        self.text_edit = QTextEdit()
        self.text_edit.setReadOnly(True)
        self.layout.addWidget(self.label_title)
        self.layout.addWidget(self.text_edit)

    def update_blockchain(self):
        self.text_edit.clear()
        for block in self.blockchain.chain:
            block_info = f"Index: {block.index}\nTimestamp: {block.timestamp}\nData: {block.data}\n" \
                         f"Hash: {block.hash}\nPrevious Hash: {block.previous_hash}\n\n"
            self.text_edit.insertPlainText(block_info)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Aplicativo de Tarefas")
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)
        self.minhas_tarefas = []  # Lista de tarefas
        self.tarefas_realizadas = []  # Lista de tarefas realizadas
        self.blockchain = Blockchain()
        self.create_task_widgets()
        self.create_task_list_widgets()
        self.create_completed_tasks_list_widgets()
        self.create_blockchain_widget()
        self.confirmation_box = ConfirmationBox()
        self.layout.addWidget(self.confirmation_box)

    def adicionar_tarefa(self):
        tarefa = self.entry_tarefa.text()
        data = self.entry_data.text()
        hora = self.entry_hora.text()
        if tarefa != "" and data != "" and hora != "":
            tarefa_com_data_hora = f"{tarefa} (Data: {data}, Hora: {hora})"
            self.minhas_tarefas.append(tarefa_com_data_hora)
            self.create_task_with_checkbox(tarefa_com_data_hora)
            self.entry_tarefa.clear()
            self.entry_data.clear()
            self.entry_hora.clear()
        else:
            self.show_warning("Campos Vazios", "Por favor, preencha todos os campos.")

    def deletar_tarefa(self):
        index = self.listbox_tarefas.currentRow()
        if index >= 0:
            tarefa_deletada = self.listbox_tarefas.item(index).text()
            self.minhas_tarefas.remove(tarefa_deletada)
            self.listbox_tarefas.takeItem(index)

    def tarefa_realizada(self):
        index = self.listbox_tarefas.currentRow()
        if index >= 0:
            item = self.listbox_tarefas.item(index)
            checkbox = self.listbox_tarefas.itemWidget(item)
            if checkbox.isChecked():
                tarefa_realizada = checkbox.text()
                self.minhas_tarefas.remove(tarefa_realizada)
                self.tarefas_realizadas.append(tarefa_realizada)
                self.listbox_tarefas.takeItem(index)
                self.create_completed_task_checkbox(tarefa_realizada)
                self.add_completed_block_to_blockchain(tarefa_realizada)
            else:
                self.show_warning("Tarefa não concluída",
                                  "Marque o checkbox da tarefa antes de marcá-la como concluída.")

    def verificar_tarefas(self):
        agora = time.strftime("%Y-%m-%d %H:%M")
        for tarefa in self.minhas_tarefas:
            data_hora_tarefa = tarefa.split("(Data: ")[1].split(", Hora: ")[0]
            hora_tarefa = tarefa.split("Hora: ")[1][:-1]
            data_hora_tarefa_completa = f"{data_hora_tarefa} {hora_tarefa}"
            if data_hora_tarefa_completa == agora:
                QMessageBox.information(self, "Tarefa", f"É hora de fazer a seguinte tarefa:\n\n{tarefa}")

    def show_warning(self, title, message):
        QMessageBox.warning(self, title, message)

    def show_info(self, title, message):
        QMessageBox.information(self, title, message)

    def create_task_widgets(self):
        frame_adicionar = QWidget()
        layout_adicionar = QVBoxLayout(frame_adicionar)

        label_tarefa = QLabel("Tarefa:")
        self.entry_tarefa = QLineEdit()
        label_data = QLabel("Data:")
        self.entry_data = QLineEdit()
        label_hora = QLabel("Hora:")
        self.entry_hora = QLineEdit()
        button_adicionar = QPushButton("Adicionar")
        button_adicionar.clicked.connect(self.adicionar_tarefa)

        layout_adicionar.addWidget(label_tarefa)
        layout_adicionar.addWidget(self.entry_tarefa)
        layout_adicionar.addWidget(label_data)
        layout_adicionar.addWidget(self.entry_data)
        layout_adicionar.addWidget(label_hora)
        layout_adicionar.addWidget(self.entry_hora)
        layout_adicionar.addWidget(button_adicionar)

        self.layout.addWidget(frame_adicionar)

    def create_task_list_widgets(self):
        frame_tarefas = QWidget()
        layout_tarefas = QVBoxLayout(frame_tarefas)

        label_tarefas = QLabel("Minhas Tarefas:")
        self.listbox_tarefas = QListWidget()
        button_deletar = QPushButton("Deletar")
        button_deletar.clicked.connect(self.deletar_tarefa)
        button_realizada = QPushButton("Tarefa Realizada")
        button_realizada.clicked.connect(self.tarefa_realizada)

        layout_tarefas.addWidget(label_tarefas)
        layout_tarefas.addWidget(self.listbox_tarefas)

        layout_button = QHBoxLayout()
        layout_button.addWidget(button_deletar)
        layout_button.addWidget(button_realizada)

        layout_tarefas.addLayout(layout_button)

        self.layout.addWidget(frame_tarefas)

    def create_completed_tasks_list_widgets(self):
        frame_tarefas_realizadas = QWidget()
        layout_tarefas_realizadas = QVBoxLayout(frame_tarefas_realizadas)

        label_tarefas_realizadas = QLabel("Tarefas Realizadas:")
        self.listbox_tarefas_realizadas = QListWidget()

        layout_tarefas_realizadas.addWidget(label_tarefas_realizadas)
        layout_tarefas_realizadas.addWidget(self.listbox_tarefas_realizadas)

        self.layout.addWidget(frame_tarefas_realizadas)

    def create_completed_task_checkbox(self, tarefa):
        checkbox = QCheckBox(tarefa)
        checkbox.setStyleSheet("QCheckBox { font-size: 14px; }")
        self.listbox_tarefas_realizadas.addItem(checkbox.text())

    def create_task_with_checkbox(self, tarefa):
        checkbox = QCheckBox(tarefa)
        checkbox.setStyleSheet("QCheckBox { font-size: 14px; }")
        item = QListWidgetItem(self.listbox_tarefas)
        item.setSizeHint(checkbox.sizeHint())
        self.listbox_tarefas.setItemWidget(item, checkbox)

    def create_blockchain_widget(self):
        self.blockchain_widget = BlockchainWidget(self.blockchain)
        self.layout.addWidget(self.blockchain_widget)

    def add_completed_block_to_blockchain(self, data):
        latest_block = self.blockchain.get_latest_block()
        previous_hash = latest_block.hash if latest_block else None
        block = Block(len(self.blockchain.chain), time.strftime("%Y-%m-%d %H:%M"), data, previous_hash)
        self.blockchain.add_block(block)
        self.blockchain.add_completed_block(block)
        self.blockchain_widget.update_blockchain()


def verify_tasks(self):
    self.verificar_tarefas()
    QTimer.singleShot(1000 * 60, self.verify_tasks)  # Verificar tarefas periodicamente


if __name__ == "__main__":
    app = QApplication(sys.argv)

    main_window = MainWindow()
    main_window.show()

    QTimer.singleShot(0, main_window.verificar_tarefas)  # Iniciar a verificação de tarefas

    app.exec_()
